#include <WiFi.h>
#include <HTTPClient.h>
#include <Update.h>
#include <ArduinoJson.h>

const char* ssid = "Eshghi2,4";
const char* password = "SabziPolo";

#define CURRENT_FIRMWARE_VERSION "1.0.2"

const char* ota_host = "http://45.195.250.247:8008";  // Dein Server

unsigned long lastPingTime = 0;
unsigned long pingInterval = 60000;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("Verbindung wird hergestellt...");

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nVerbunden mit IP:");
  Serial.println(WiFi.localIP());

  checkDeviceFirmware();  // individuell prüfen
  sendPing();
}

void loop() {
  if (millis() - lastPingTime > pingInterval) {
    sendPing();
    checkDeviceFirmware();  // regelmäßig prüfen
    lastPingTime = millis();
  }
}

void sendPing() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(String(ota_host) + "/ping");
    http.addHeader("Content-Type", "application/json");

    String body = "{\"mac\": \"" + WiFi.macAddress() + "\", \"version\": \"" + String(CURRENT_FIRMWARE_VERSION) + "\"}";
    int httpCode = http.POST(body);

    if (httpCode > 0) {
      Serial.printf("Ping erfolgreich (Code %d)\n", httpCode);
    } else {
      Serial.printf("Ping fehlgeschlagen: %d\n", httpCode);
    }

    http.end();
  }
}

void checkDeviceFirmware() {
  if (WiFi.status() != WL_CONNECTED) return;

  HTTPClient http;
  String url = String(ota_host) + "/device_firmware.json?mac=" + WiFi.macAddress();
  http.begin(url);

  int httpCode = http.GET();
  if (httpCode == 200) {
    String payload = http.getString();
    StaticJsonDocument<512> doc;
    DeserializationError error = deserializeJson(doc, payload);

    if (!error) {
      const char* assignedVersion = doc["version"];
      const char* firmwareUrl = doc["url"];

      Serial.printf("Installierte Version: %s\n", CURRENT_FIRMWARE_VERSION);
      Serial.printf("Zugewiesene Version: %s\n", assignedVersion);

      if (String(assignedVersion) != CURRENT_FIRMWARE_VERSION && String(assignedVersion) != "") {
        Serial.println("Neue Version erkannt – OTA wird gestartet.");
        performOTA(firmwareUrl);
      } else {
        Serial.println("Firmware ist aktuell oder keine zugewiesen.");
      }
    } else {
      Serial.println("Fehler beim Parsen von device_firmware.json.");
    }
  } else {
    Serial.printf("Fehler beim Abrufen von /device_firmware.json: HTTP %d\n", httpCode);
  }

  http.end();
}

void performOTA(String firmwareUrl) {
  WiFiClient client;
  HTTPClient http;
  http.begin(client, firmwareUrl);
  int httpCode = http.GET();

  if (httpCode == 200) {
    int contentLength = http.getSize();
    if (contentLength <= 0) {
      Serial.println("Ungültige Firmware-Größe.");
      return;
    }

    if (!Update.begin(contentLength)) {
      Serial.println("Nicht genug Speicher für OTA.");
      return;
    }

    Serial.printf("OTA-Update gestartet (%d Bytes)...\n", contentLength);

    WiFiClient& stream = http.getStream();
    uint8_t buff[128];
    int written = 0;
    int lastPercent = -1;

    while (http.connected() && written < contentLength) {
      size_t size = stream.available();
      if (size) {
        int len = stream.readBytes(buff, min(size, sizeof(buff)));
        Update.write(buff, len);
        written += len;
        int percent = (written * 100) / contentLength;
        if (percent != lastPercent) {
          Serial.printf("Fortschritt: %d%%\n", percent);
          lastPercent = percent;
        }
      }
      delay(1);
    }

    if (Update.end()) {
      if (Update.isFinished()) {
        Serial.println("OTA erfolgreich abgeschlossen. Neustart...");
        delay(1000);
        ESP.restart();
      } else {
        Serial.println("Update wurde nicht korrekt beendet.");
      }
    } else {
      Serial.printf("Fehler beim Update: %s\n", Update.errorString());
    }
  } else {
    Serial.printf("Firmware konnte nicht geladen werden. HTTP-Code: %d\n", httpCode);
  }

  http.end();
}
